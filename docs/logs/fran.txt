@see7e ➜ /workspaces/42-libft/libft (42) $ ~/francinette/tester.sh
╔══════════════════════════════════════════════════════════════════════════════╗
║                Welcome to Francinette, a 42 tester framework!                ║
╚═══════════════════════╦══════════════════════════════╦═══════════════════════╝
                        ║             libft            ║
                        ╚══════════════════════════════╝
✔ Preparing framework
✔ Executing: norminette
✔ Executing: make fclean all bonus
ℹ Executing: libft-war-machine (https://github.com/y3ll0w42/libft-war-machine)
--------------------------------------------------------------------------------
|                              COMPILING LIBFT                                 |
--------------------------------------------------------------------------------
rules:
all        $(NAME)       fclean       re           clean       bonus     libft.a
ok         ok            ok           ok           ok          ok        found

FUNCTION         TESTS                RESULT
ft_isalpha       ✓✓✓✓✓✓✓              OK
ft_isdigit       ✓✓✓✓✓✓✓              OK
ft_isalnum       ✓✓✓✓✓✓✓              OK
ft_isascii       ✓✓✓✓✓✓✓✓             OK
ft_isprint       ✓✓✓✓✓✓✓              OK
ft_strlen        ✓✓✓✓✓✓               OK
ft_memset        ✓✓✓✓                 OK
ft_bzero         ✓✓                   OK
ft_memcpy        ✓✓✓                  OK
ft_memmove       ✓✓✓✓✓                OK
ft_strlcpy       ✓✓✓✓✓                OK
ft_strlcat       ✓✓✓✓✓✓✓✓✓            OK
ft_toupper       ✓✓✓✓✓✓✓              OK
ft_tolower       ✓✓✓✓✓✓✓              OK
ft_strchr        ✓✓✓✓✓✓               OK
ft_strrchr       ✓✓✓✓✓✓✓✓             OK
ft_strncmp       ✓✓✓✓✓✓✓✓✓✓✓          OK
ft_memchr        ✓✓✓✓✓✓               OK
ft_memcmp        ✓✓✓✓✓✓✓✓✓            OK
ft_strnstr       ✓✓✓✓✓✓✓✓✓✓           OK
ft_atoi          ✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓  OK
ft_calloc        ✓                    OK
ft_strdup        ✓                    OK
ft_substr        ✓✓✓✓✓                OK
ft_strjoin       ✓✓✓✓                 OK
ft_strtrim       ✓✓✓✓✓                OK
ft_split         ✓✓✓✓✓✓               OK
ft_itoa          ✓✓✓✓✓✓✓✓✗✓           KO
ft_strmapi       ✓                    OK
ft_striteri      ✓                    OK
ft_putchar_fd    ✓✓✓✓✓✓✓              OK
ft_putstr_fd     ✓✓✓✓                 OK
ft_putendl_fd    ✓✓✓✓                 OK
ft_putnbr_fd     ✓✓✓✓✓✓✓✓✓            OK
ft_lstnew        ✓✓✓                  OK
ft_lstadd_front  ✓                    OK
ft_lstsize       ✓                    OK
ft_lstlast       ✓                    OK
ft_lstadd_back   ✓                    OK
ft_lstdelone     ✓                    OK
ft_lstclear      ✓                    OK
ft_lstiter       ✓                    OK
ft_lstmap        ✓                    OK

Abort: A  Bus error: B  Segmentation fault: S  Timeout: T

More information in: /home/codespace/francinette/temp/libft/war-machine/deepthought

Errors in itoa: /home/codespace/francinette/temp/libft/war-machine/tests/Part2_functions/ft_itoa
Test 9:
    char *res = ft_itoa(-2147483648LL);
    ft_print_result(res);
    free(res);
Expected (cat -e test09.output):
-2147483648
Your result (cat -e user_output_test09):

✖ Compiling tests: libftTester (https://github.com/Tripouille/libftTester)
tests/ft_strlcat_test.cpp:39:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strlcat(dest, "", 15) == 10 && !strcmp(dest, "1111111111")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:41:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strlcat(dest, "", 42) == 0 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:43:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strlcat(dest, "", 0) == 0 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:45:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strlcat(dest, "123", 1) == 3 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:47:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strlcat(dest, "123", 2) == 3 && !strcmp(dest, "1")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:49:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strlcat(dest, "123", 3) == 3 && !strcmp(dest, "12")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:51:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strlcat(dest, "123", 4) == 3 && !strcmp(dest, "123")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:53:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 17 */ check(ft_strlcat(dest, "123", 0) == 3 && !strcmp(dest, "")); showLeaks();
                                        ^
8 warnings generated.
tests/ft_atoi_test.cpp:22:16: error: no matching function for call to 'ft_atoi'
        /* 1 */ check(ft_atoi((e + "1").c_str()) == 1); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:23:16: error: no matching function for call to 'ft_atoi'
        /* 2 */ check(ft_atoi((e + "a1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:24:16: error: no matching function for call to 'ft_atoi'
        /* 3 */ check(ft_atoi((e + "--1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:25:16: error: no matching function for call to 'ft_atoi'
        /* 4 */ check(ft_atoi((e + "++1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:26:16: error: no matching function for call to 'ft_atoi'
        /* 5 */ check(ft_atoi((e + "+1").c_str()) == 1); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:27:16: error: no matching function for call to 'ft_atoi'
        /* 6 */ check(ft_atoi((e + "-1").c_str()) == -1); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:28:16: error: no matching function for call to 'ft_atoi'
        /* 7 */ check(ft_atoi((e + "0").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:29:16: error: no matching function for call to 'ft_atoi'
        /* 8 */ check(ft_atoi((e + "+42lyon").c_str()) == 42); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:30:16: error: no matching function for call to 'ft_atoi'
        /* 9 */ check(ft_atoi((e + "+101").c_str()) == 101); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:31:17: error: no matching function for call to 'ft_atoi'
        /* 10 */ check(ft_atoi((e + to_string(INT_MAX)).c_str()) == INT_MAX); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:32:17: error: no matching function for call to 'ft_atoi'
        /* 11 */ check(ft_atoi((e + to_string(INT_MIN)).c_str()) == INT_MIN); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:33:25: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_atoi("-+42") == 0); showLeaks();
                               ^
tests/ft_atoi_test.cpp:34:25: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_atoi("+-42") == 0); showLeaks();
                               ^
tests/ft_atoi_test.cpp:35:17: error: no matching function for call to 'ft_atoi'
        /* 14 */ check(ft_atoi((string("+") + e + "42").c_str()) == 0); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:36:17: error: no matching function for call to 'ft_atoi'
        /* 15 */ check(ft_atoi((string("-") + e + "42").c_str()) == 0); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:37:17: error: no matching function for call to 'ft_atoi'
        /* 16 */ check(ft_atoi((string("1") + e + "42").c_str()) == 1); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:38:17: error: no matching function for call to 'ft_atoi'
        /* 17 */ check(ft_atoi((string("-1") + e + "42").c_str()) == -1); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
2 warnings and 15 errors generated.

Problem compiling tests
✔ Compiling tests: libft-unit-test (https://github.com/alelievr/libft-unit-test)
ℹ Testing:
ft_isalpha      : [OK] 
ft_isdigit      : [OK] 
ft_isalnum      : [OK] 
ft_isascii      : [OK] 
ft_isprint      : [OK] 
ft_strlen       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memset       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_bzero        : [OK] [OK] [OK] [OK] 
ft_memcpy       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [NO CRASH] [NO CRASH] [OK] [OK] 
[no crash]: your memcpy does not segv with NULL on first params
[no crash]: your memcpy does not segv with NULL on second params

ft_memmove      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] [OK] 
[crash]: your memmove does not well with NULL as both parameters and size

ft_strlcpy      : [OK] [OK] [OK] [OK] [OK] [OK] [NO CRASH] 
[no crash]: your strlcpy doe not segfault when null parameter is sent

ft_strlcat      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_toupper      : [OK] 
ft_tolower      : [OK] 
ft_strchr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strrchr      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strncmp      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memchr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memcmp       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strnstr      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_atoi         : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_calloc       : [OK] [OK] [OK] [OK] [OK] 
ft_strdup       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_substr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strjoin      : [OK] [OK] [OK] [OK] [OK] 
ft_strtrim      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_split        : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_itoa         : [OK] [OK] [OK] [OK] [OK] [OK] [KO] [OK] [OK] 
[KO]: your itoa does not allocate the good size so the \0 test may be false

ft_strmapi      : [OK] [OK] [OK] [OK] [OK] 
ft_striteri     : [OK] [OK] 
ft_putchar_fd   : [OK] [OK] 
ft_putstr_fd    : [OK] [OK] 
ft_putendl_fd   : [OK] [OK] 
ft_putnbr_fd    : [OK] [OK] [OK] [OK] [OK] 
ft_lstnew       : [OK] [OK] [OK] [OK] 
ft_lstadd_front : [OK] [OK] [OK] 
ft_lstsize      : [OK] [OK] 
ft_lstlast      : [OK] [OK] 
ft_lstadd_back  : [OK] [OK] [OK] 
ft_lstdelone    : [OK] 
ft_lstclear     : [OK] [OK] [OK] 
ft_lstiter      : [OK] 
ft_lstmap       : [OK] 

\xe2\x9a\xa0 : your libft is using forbidden functions so the result may not be relevant !


[no crash]: your memcpy does not segv with NULL on first params
 Test code:
        ft_memcpy(((void*)0), "segfaulter tu dois", 17);
 
 
 [no crash]: your memcpy does not segv with NULL on second params
 Test code:
        ft_memcpy("            ", ((void*)0), 17);
 
 
 [crash]: your memmove does not well with NULL as both parameters and size
 Test code:
        ft_memmove(((void*)0), ((void*)0), 5);
 
 
 [no crash]: your strlcpy doe not segfault when null parameter is sent
 Test code:
        ft_strlcpy(((void*)0), ((void*)0), 10);
 
 
 [KO]: your itoa does not allocate the good size so the \0 test may be false
 Test code:
        int size;
 
        ft_itoa(-5859);
        size = get_last_malloc_size();
        if (size == 6)
                exit(TEST_SUCCESS);
        exit(TEST_KO);
 
 Diffs:
         itoa: |6|
      ft_itoa: |7|
 
✔ Compiling tests: fsoares (my own)
ℹ Testing:
ft_isalpha      : OK
ft_isdigit      : OK
ft_isalnum      : OK
ft_isascii      : OK
ft_isprint      : OK
ft_strlen       : OK
ft_memset       : OK
ft_bzero        : OK
ft_memcpy       : OK
ft_memmove      : OK
ft_strlcpy      : OK
ft_strlcat      : OK
ft_toupper      : OK
ft_tolower      : OK
ft_strchr       : OK
ft_strrchr      : OK
ft_strncmp      : OK
ft_memchr       : OK
ft_memcmp       : OK
ft_strnstr      : OK
ft_atoi         : OK
ft_calloc       : OK
ft_strdup       : OK
ft_substr       : OK
ft_strjoin      : OK
ft_strtrim      : OK
ft_split        : OK
ft_itoa         : KO
ft_strmapi      : OK
ft_striteri     : OK
ft_putchar_fd   : OK
ft_putstr_fd    : OK
ft_putendl_fd   : OK
ft_putnbr_fd    : OK
ft_lstnew       : OK
ft_lstadd_front : OK
ft_lstsize      : OK
ft_lstlast      : OK
ft_lstadd_back  : OK
ft_lstdelone    : OK
ft_lstclear     : OK
ft_lstiter      : OK
ft_lstmap       : OK

Errors found:
For ft_itoa, in /home/codespace/francinette/tests/libft/fsoares/test_itoa.c:

Error in test 5: ft_itoa(-2147483648): not enough memory allocated, needed: 12, 
reserved: 3
Error in test 5: ft_itoa(-2147483648): 
Memory leak: 0x5574b4bee8b0 - 4096 bytes
You failed to free the memory allocated at:



Summary: 

Failed tests: itoa, memcpy, memmove, libftTester, strlcpy

Passed tests: isalpha, isdigit, isalnum, isascii, isprint, strlen, memset, bzero, strlcat, toupper, tolower, strchr, strrchr, strncmp, memchr, memcmp, strnstr, atoi, calloc, strdup, substr, strjoin, strtrim, split, strmapi, striteri, putchar_fd, putstr_fd, putendl_fd, putnbr_fd, lstnew, lstadd_front, lstsize, lstlast, lstadd_back, lstdelone, lstclear, lstiter, lstmap