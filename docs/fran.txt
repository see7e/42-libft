@see7e ➜ /workspaces/42-libft/libft (42) $ ~/francinette/tester.sh 
╔══════════════════════════════════════════════════════════════════════════════╗
║                Welcome to Francinette, a 42 tester framework!                ║
╚═══════════════════════╦══════════════════════════════╦═══════════════════════╝
                        ║             libft            ║
                        ╚══════════════════════════════╝
✔ Preparing framework
✔ Executing: norminette
✔ Executing: make fclean all bonus
ℹ Executing: libft-war-machine (https://github.com/y3ll0w42/libft-war-machine)
--------------------------------------------------------------------------------
|                              COMPILING LIBFT                                 |
--------------------------------------------------------------------------------
rules:
all        $(NAME)       fclean       re           clean       bonus     libft.a
ok         ok            ok           ok           ok          ok        found

FUNCTION         TESTS                RESULT
ft_isalpha       ✓✓✓✓✓✓✓              OK
ft_isdigit       ✓✓✓✓✓✓✓              OK
ft_isalnum       ✓✓✓✓✓✓✓              OK
ft_isascii       ✓✓✓✓✓✓✓✓             OK
ft_isprint       ✓✓✓✓✓✓✓              OK
ft_strlen        ✓✓✓✓✓✓               OK
ft_memset        ✓✓✓✓                 OK
ft_bzero         ✓✓                   OK
ft_memcpy        ✓✓✓                  OK
ft_memmove       ✓✓✓✓✓                OK
ft_strlcpy       ✓✓✓✓✓                OK
ft_strlcat       ✓✓✓✓✓✓✓✓✓            OK
ft_toupper       ✓✓✓✓✓✓✓              OK
ft_tolower       ✓✓✓✓✓✓✓              OK
ft_strchr        ✓✓✓✓✓✓               OK
ft_strrchr       ✓✓✓✓✓✓✓✓             OK
ft_strncmp       ✓✓✓✓✓✓✓✓✓✓✗          KO
ft_memchr        ✓✓✓✓✓✓               OK
ft_memcmp        ✓✓✓✓✓✓✓✓✓            OK
ft_strnstr       ✓✓✓✓✓✓✓✓✓✓           OK
ft_atoi          ✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓  OK
ft_calloc        ✓                    OK
ft_strdup        ✓                    OK
ft_substr        ✓✓✓✓✓                OK
ft_strjoin       ✗✗✗✓                 KO
ft_strtrim       ✓✓✓✓✓                OK
ft_split         ✓TTTT✓               KO
ft_itoa          compil. failed       KO
ft_strmapi       ✓                    OK
ft_striteri      ✓                    OK
ft_putchar_fd    ✓✓✓✓✓✓✓              OK
ft_putstr_fd     ✓✓✓✓                 OK
ft_putendl_fd    ✓✓✓✓                 OK
ft_putnbr_fd     ✓✓✓✓✓✓✓✓✗            KO
ft_lstnew        ✓✓✓                  OK
ft_lstadd_front  ✓                    OK
ft_lstsize       ✗                    KO
ft_lstlast       ✓                    OK
ft_lstadd_back   ✓                    OK
ft_lstdelone     ✓                    OK
ft_lstclear      ✓                    OK
ft_lstiter       ✓                    OK
ft_lstmap        ✓                    OK

Abort: A  Bus error: B  Segmentation fault: S  Timeout: T

More information in: /home/codespace/francinette/temp/libft/war-machine/deepthought

Errors in strncmp: /home/codespace/francinette/temp/libft/war-machine/tests/Part1_functions/ft_strncmp
Test 11:
    ft_print_result(ft_strncmp("test\200", "test\0", 6));
Expected (cat -e test11.output):
1
Your result (cat -e user_output_test11):
-1
Errors in strjoin: /home/codespace/francinette/temp/libft/war-machine/tests/Part2_functions/ft_strjoin
Test 1:
    if (!(strjoin = ft_strjoin(s1, s2)))
        ft_print_result("NULL");
    else
        ft_print_result(strjoin);
    if (strjoin == s1 || strjoin == s2)
        ft_print_result("\nA new string was not returned");
Expected (cat -e test01.output):
lorem ipsumdolor sit amet
Your result (cat -e user_output_test01):

Test 2:
    s1[0] = '\0';
    if (!(strjoin = ft_strjoin(s1, s2)))
        ft_print_result("NULL");
    else
        ft_print_result(strjoin);
    if (strjoin == s1 || strjoin == s2)
        ft_print_result("\nA new string was not returned");
Expected (cat -e test02.output):
dolor sit amet
Your result (cat -e user_output_test02):

Test 3:
    s2[0] = '\0';
    if (!(strjoin = ft_strjoin(s1, s2)))
        ft_print_result("NULL");
    else
        ft_print_result(strjoin);
    if (strjoin == s1 || strjoin == s2)
        ft_print_result("\nA new string was not returned");
Expected (cat -e test03.output):
lorem ipsum
Your result (cat -e user_output_test03):

Errors in split: /home/codespace/francinette/temp/libft/war-machine/tests/Part2_functions/ft_split
Test 2:
    if (!(tabstr = ft_split("lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse", ' ')))
        ft_print_result("NULL");
    else
    {
        while (tabstr[i] != NULL)
...

File too large. To see full report open: /home/codespace/francinette/temp/libft/war-machine/errors.log

✖ Compiling tests: libftTester (https://github.com/Tripouille/libftTester)
tests/ft_strlcat_test.cpp:39:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strlcat(dest, "", 15) == 10 && !strcmp(dest, "1111111111")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:41:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strlcat(dest, "", 42) == 0 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:43:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strlcat(dest, "", 0) == 0 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:45:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strlcat(dest, "123", 1) == 3 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:47:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strlcat(dest, "123", 2) == 3 && !strcmp(dest, "1")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:49:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strlcat(dest, "123", 3) == 3 && !strcmp(dest, "12")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:51:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strlcat(dest, "123", 4) == 3 && !strcmp(dest, "123")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:53:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 17 */ check(ft_strlcat(dest, "123", 0) == 3 && !strcmp(dest, "")); showLeaks();
                                        ^
8 warnings generated.
tests/ft_strncmp_test.cpp:19:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 1 */ check(ft_strncmp("t", "", 0) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:19:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 1 */ check(ft_strncmp("t", "", 0) == 0); showLeaks();
                                      ^
tests/ft_strncmp_test.cpp:20:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 2 */ check(ft_strncmp("1234", "1235", 3) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:20:35: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 2 */ check(ft_strncmp("1234", "1235", 3) == 0); showLeaks();
                                         ^
tests/ft_strncmp_test.cpp:21:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 3 */ check(ft_strncmp("1234", "1235", 4) < 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:21:35: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 3 */ check(ft_strncmp("1234", "1235", 4) < 0); showLeaks();
                                         ^
tests/ft_strncmp_test.cpp:22:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 4 */ check(ft_strncmp("1234", "1235", -1) < 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:22:35: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 4 */ check(ft_strncmp("1234", "1235", -1) < 0); showLeaks();
                                         ^
tests/ft_strncmp_test.cpp:23:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 5 */ check(ft_strncmp("", "", 42) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:23:31: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 5 */ check(ft_strncmp("", "", 42) == 0); showLeaks();
                                     ^
tests/ft_strncmp_test.cpp:24:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 6 */ check(ft_strncmp("Tripouille", "Tripouille", 42) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:24:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 6 */ check(ft_strncmp("Tripouille", "Tripouille", 42) == 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:25:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 7 */ check(ft_strncmp("Tripouille", "tripouille", 42) < 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:25:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 7 */ check(ft_strncmp("Tripouille", "tripouille", 42) < 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:26:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 8 */ check(ft_strncmp("Tripouille", "TriPouille", 42) > 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:26:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 8 */ check(ft_strncmp("Tripouille", "TriPouille", 42) > 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:27:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 9 */ check(ft_strncmp("Tripouille", "TripouillE", 42) > 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:27:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 9 */ check(ft_strncmp("Tripouille", "TripouillE", 42) > 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:28:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strncmp("Tripouille", "TripouilleX", 42) < 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:28:42: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strncmp("Tripouille", "TripouilleX", 42) < 0); showLeaks();
                                                ^
tests/ft_strncmp_test.cpp:29:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strncmp("Tripouille", "Tripouill", 42) > 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:29:42: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strncmp("Tripouille", "Tripouill", 42) > 0); showLeaks();
                                                ^
tests/ft_strncmp_test.cpp:30:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strncmp("", "1", 0) == 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:30:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strncmp("", "1", 0) == 0); showLeaks();
                                      ^
tests/ft_strncmp_test.cpp:31:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strncmp("1", "", 0) == 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:31:33: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strncmp("1", "", 0) == 0); showLeaks();
                                       ^
tests/ft_strncmp_test.cpp:32:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strncmp("", "1", 1) < 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:32:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strncmp("", "1", 1) < 0); showLeaks();
                                      ^
tests/ft_strncmp_test.cpp:33:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strncmp("1", "", 1) > 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:33:33: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strncmp("1", "", 1) > 0); showLeaks();
                                       ^
tests/ft_strncmp_test.cpp:34:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strncmp("", "", 1) == 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:34:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strncmp("", "", 1) == 0); showLeaks();
                                      ^
32 warnings generated.
tests/ft_atoi_test.cpp:22:16: error: no matching function for call to 'ft_atoi'
        /* 1 */ check(ft_atoi((e + "1").c_str()) == 1); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:23:16: error: no matching function for call to 'ft_atoi'
        /* 2 */ check(ft_atoi((e + "a1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:24:16: error: no matching function for call to 'ft_atoi'
        /* 3 */ check(ft_atoi((e + "--1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:25:16: error: no matching function for call to 'ft_atoi'
        /* 4 */ check(ft_atoi((e + "++1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:26:16: error: no matching function for call to 'ft_atoi'
        /* 5 */ check(ft_atoi((e + "+1").c_str()) == 1); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:27:16: error: no matching function for call to 'ft_atoi'
        /* 6 */ check(ft_atoi((e + "-1").c_str()) == -1); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:28:16: error: no matching function for call to 'ft_atoi'
        /* 7 */ check(ft_atoi((e + "0").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:29:16: error: no matching function for call to 'ft_atoi'
        /* 8 */ check(ft_atoi((e + "+42lyon").c_str()) == 42); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:30:16: error: no matching function for call to 'ft_atoi'
        /* 9 */ check(ft_atoi((e + "+101").c_str()) == 101); showLeaks();
                      ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:31:17: error: no matching function for call to 'ft_atoi'
        /* 10 */ check(ft_atoi((e + to_string(INT_MAX)).c_str()) == INT_MAX); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:32:17: error: no matching function for call to 'ft_atoi'
        /* 11 */ check(ft_atoi((e + to_string(INT_MIN)).c_str()) == INT_MIN); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:33:25: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_atoi("-+42") == 0); showLeaks();
                               ^
tests/ft_atoi_test.cpp:34:25: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_atoi("+-42") == 0); showLeaks();
                               ^
tests/ft_atoi_test.cpp:35:17: error: no matching function for call to 'ft_atoi'
        /* 14 */ check(ft_atoi((string("+") + e + "42").c_str()) == 0); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:36:17: error: no matching function for call to 'ft_atoi'
        /* 15 */ check(ft_atoi((string("-") + e + "42").c_str()) == 0); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:37:17: error: no matching function for call to 'ft_atoi'
        /* 16 */ check(ft_atoi((string("1") + e + "42").c_str()) == 1); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:38:17: error: no matching function for call to 'ft_atoi'
        /* 17 */ check(ft_atoi((string("-1") + e + "42").c_str()) == -1); showLeaks();
                       ^~~~~~~
./libft.h:145:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
2 warnings and 15 errors generated.

Problem compiling tests
✖ Compiling tests: libft-unit-test (https://github.com/alelievr/libft-unit-test)
/usr/bin/ld: ft_putnbr_fd.o: in function `ft_putchar_fd':
ft_putnbr_fd.c:(.text+0x0): multiple definition of `ft_putchar_fd'; ft_putchar_fd.o:ft_putchar_fd.c:(.text+0x0): first defined here
collect2: error: ld returned 1 exit status
make[1]: *** [Makefile:99: so] Error 1
make: *** [Makefile:161: libft.so] Error 2

Problem compiling tests
✖ Compiling tests: fsoares (my own)
/usr/bin/ld: ./libft.a(ft_itoa.o): in function `ft_itoa':
/home/codespace/francinette/temp/libft/__my_srcs/ft_itoa.c:52: undefined reference to `ft_abs'
collect2: error: ld returned 1 exit status

Problem compiling the tests

Summary: 

Failed tests: split, lstsize, strjoin, fsoares, strncmp, libft-unit-test, libftTester, putnbr_fd

Passed tests: isalpha, isdigit, isalnum, isascii, isprint, strlen, memset, bzero, memcpy, memmove, strlcpy, strlcat, toupper, tolower, strchr, strrchr, memchr, memcmp, strnstr, atoi, calloc, strdup, substr, strtrim, itoa, strmapi, striteri, putchar_fd, putstr_fd, putendl_fd, lstnew, lstadd_front, lstlast, lstadd_back, lstdelone, lstclear, lstiter, lstmap